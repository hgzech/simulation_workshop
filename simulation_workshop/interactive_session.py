# AUTOGENERATED! DO NOT EDIT! File to edit: 04_interactive_session.ipynb (unless otherwise specified).

__all__ = ['plot_rescorla_game', 'simulate_M4ChoiceKernel_v1', 'plot_choice_kernel_game']

# Cell
import numpy as np

# Cell
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

def plot_rescorla_game(T, mu, alpha, beta):
    fig, ax = plt.subplots(1,1, figsize = (16,8))
    actions, rewards, Qs, deltas = simulate_M3RescorlaWagner_v1(T, mu, alpha, beta)
    df = pd.DataFrame(Qs)
    df['pe'] = pd.Series(deltas, name = 'delta')
    df.columns = ['Q1','Q2','pe']
    df.pe.plot(alpha = .5)
    df.Q1.plot()
    df.Q2.plot()
    sns.despine()
    plt.legend()
    ax.set_ylim([-1,1])

# Cell
def simulate_M4ChoiceKernel_v1(T, mu, alpha, beta):
    choice_kernel = np.array([0, 0])
    choice_kernels = []
    actions = []
    rewards = []
    for t in range(T):
        choice_kernels.append(choice_kernel)
        p = softmax(choice_kernel, beta)
        action = choose(p)
        reward = allocate_reward(action, mu)
        actions.append(action)
        rewards.append(reward)
        choice_kernel = update_choice_kernels(choice_kernel, action, alpha)



    return actions, rewards, choice_kernels


# Cell
def plot_choice_kernel_game(T, mu, alpha, beta):
    fig, ax = plt.subplots(1,1, figsize = (16,8))
    actions, rewards, Cks = simulate_M4ChoiceKernel_v1(T, mu, alpha, beta)
    df = pd.DataFrame(Cks)
    df.columns = ['Ck1','Ck2']
    df.Ck1.plot()
    df.Ck2.plot()
    sns.despine()
    plt.legend()
    ax.set_ylim([-.2,1.1])

    # Adding actions
    action_df = pd.DataFrame({'action':actions})
    action_df['trial'] = action_df.index
    action_df['y'] = -.1
    action_df['action'] = action_df.action.replace({0:'1',1:'2'})
    sns.scatterplot(x = 'trial', y = 'y', hue = 'action', data = action_df, ax = ax, hue_order = ['1','2'])

    return actions